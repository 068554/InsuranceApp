PROCEDURE "INSURANCEAPP"."InsuranceApp.procedure::InsertWeather" (
    IN city_name NVARCHAR(30),
    IN hum NVARCHAR(30),
    IN press NVARCHAR(30),
    IN temp_avg NVARCHAR(30),
    IN temp_mx NVARCHAR(30), 
    IN temp_mn NVARCHAR(30),  
    IN condA NVARCHAR(30),
    IN condB NVARCHAR(30),
    IN latt NVARCHAR(30), 
    IN lon NVARCHAR(30)
    
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
   --DEFAULT SCHEMA <default_schema_name>
--   READS SQL DATA AS
BEGIN
   /************************************* 
       Write your procedure logic  
   *************************************/
   Declare posted_time_iot TIMESTAMP; 
   Declare posted_time_weather TIMESTAMP; 
   Declare Flag NVARCHAR(10);
   SELECT TOP 1 G_CREATED into posted_time_iot from "SYSTEM"."T_IOT_92DDB55E7B20E5CB01AC" order by G_CREATED DESC;
   SELECT TOP 1 "captured_time" into posted_time_weather FROM "INSURANCEAPP"."InsuranceApp.dataservice::insurancedb.WEATHERDATA" order by "captured_time" DESC;
   IF (posted_time_iot != posted_time_weather)
   THEN 
   insert into "INSURANCEAPP"."InsuranceApp.dataservice::insurancedb.WEATHERDATA" 
   values (:city_name,:hum,:press,:temp_avg,:temp_mx,:temp_mn,:condA,:condB,:latt,:lon,:posted_time_iot);
   ELSE
   insert into "INSURANCEAPP"."InsuranceApp.dataservice::insurancedb.WEATHERDATAHISTORY" 
   values (:city_name,:hum,:press,:temp_avg,:temp_mx,:temp_mn,:condA,:condB,:latt,:lon,CURRENT_TIMESTAMP);
   END IF;
END